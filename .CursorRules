# Restorant Menü Projesi Kuralları ve Standartları

## Supabase Depolama Kuralları

### Bucket İsimlendirme Standartları
- Kategori Resimleri: `category-images`
- Ürün Resimleri: `product-images`
- Banner Resimleri: `banner-images`

### Resim Yükleme Standartları

#### Kategori Resimleri
- Maksimum boyut: 2MB
- İzin verilen formatlar: .jpg, .jpeg, .png
- Önerilen boyutlar: 800x600px
- Dosya isimlendirme: `category-${categoryId}-${timestamp}.${extension}`

#### Ürün Resimleri (Çoklu)
- Maksimum boyut (her resim için): 2MB
- İzin verilen formatlar: .jpg, .jpeg, .png
- Önerilen boyutlar: 1200x800px
- Ana resim isimlendirme: `product-${productId}-main-${timestamp}.${extension}`
- Diğer resimler: `product-${productId}-${index}-${timestamp}.${extension}`
- Bir ürün için maksimum 5 resim

### Supabase Bucket Politikaları

Her bucket için aşağıdaki politikalar uygulanmalıdır:

```sql
-- Herkes görebilir
CREATE POLICY "Herkes görebilir"
ON storage.objects FOR SELECT
USING (bucket_id = 'bucket_name');

-- Sadece auth kullanıcılar yükleyebilir
CREATE POLICY "Auth kullanıcılar yükleyebilir"
ON storage.objects FOR INSERT
WITH CHECK (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);

-- Güncelleme izni (sadece auth kullanıcılar)
CREATE POLICY "Auth kullanıcı güncelleme izni" 
ON storage.objects FOR UPDATE
USING (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);

-- Silme izni (sadece auth kullanıcılar)
CREATE POLICY "Auth kullanıcı silme izni" 
ON storage.objects FOR DELETE 
USING (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);
```

## Kimlik Doğrulama ve Token Yönetimi

### Token Yönetimi
- Access token'lar localStorage'da saklanır
- Refresh token'lar secure cookie olarak saklanır
- Token yenileme süresi: 7 gün
- Access token süresi: 1 saat

### Güvenlik Önlemleri
- Tüm API istekleri için JWT token zorunludur
- Rate limiting: 100 istek/dakika
- Başarısız login denemelerinde progressive delay uygulanır
- Hassas veriler için additional encryption kullanılır

## Sürükle-Bırak Fonksiyonalitesi

### Kategori Sıralaması
- Her kategorinin `order` alanı vardır
- Sıralama değişikliği real-time olarak kaydedilir
- Optimistic UI update kullanılır
- Batch update için debounce: 500ms

### Ürün Sıralaması
- Ürünler kategori içinde sıralanır
- Her ürünün `categoryOrder` alanı vardır
- Kategoriler arası taşıma desteklenir
- Sıralama değişikliği real-time kaydedilir

## Genel Kurallar

### Kod Formatı
- ESLint ve Prettier kullanımı zorunludur
- TypeScript strict mode aktif
- Commit mesajları conventional commits formatında

### Performans
- Resimler lazy loading ile yüklenir
- Liste görünümlerinde virtualization kullanılır
- API istekleri için caching implementasyonu
- Büyük listeler için pagination zorunlu

### Hata Yönetimi
- Tüm API hataları merkezi error handler üzerinden yönetilir
- Kullanıcı dostu hata mesajları gösterilir
- Network hataları için retry mekanizması
- Offline support için error boundary kullanımı
