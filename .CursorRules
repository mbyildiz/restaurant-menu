# Restorant Menü Projesi Kuralları ve Standartları

## Supabase Depolama Kuralları

### Bucket İsimlendirme Standartları
- Kategori Resimleri: `category-images`
- Ürün Resimleri: `product-images`
- Banner Resimleri: `banner-images`

### Resim Yükleme Standartları

#### Kategori Resimleri
- Maksimum boyut: 2MB
- İzin verilen formatlar: .jpg, .jpeg, .png
- Önerilen boyutlar: 800x600px
- Dosya isimlendirme: `category-${categoryId}-${timestamp}.${extension}`

#### Ürün Resimleri (Çoklu)
- Maksimum boyut (her resim için): 2MB
- İzin verilen formatlar: .jpg, .jpeg, .png
- Önerilen boyutlar: 1200x800px
- Ana resim isimlendirme: `product-${productId}-main-${timestamp}.${extension}`
- Diğer resimler: `product-${productId}-${index}-${timestamp}.${extension}`
- Bir ürün için maksimum 5 resim

### Supabase Bucket Politikaları

Her bucket için aşağıdaki politikalar uygulanmalıdır:

```sql
-- Herkes görebilir
CREATE POLICY "Herkes görebilir"
ON storage.objects FOR SELECT
USING (bucket_id = 'bucket_name');

-- Sadece auth kullanıcılar yükleyebilir
CREATE POLICY "Auth kullanıcılar yükleyebilir"
ON storage.objects FOR INSERT
WITH CHECK (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);

-- Güncelleme izni (sadece auth kullanıcılar)
CREATE POLICY "Auth kullanıcı güncelleme izni" 
ON storage.objects FOR UPDATE
USING (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);

-- Silme izni (sadece auth kullanıcılar)
CREATE POLICY "Auth kullanıcı silme izni" 
ON storage.objects FOR DELETE 
USING (
    bucket_id = 'bucket_name' 
    AND auth.role() = 'authenticated'
);
```

## Kimlik Doğrulama ve Token Yönetimi

### Token Yönetimi
- Access token'lar localStorage'da saklanır
- Refresh token'lar secure cookie olarak saklanır
- Token yenileme süresi: 7 gün
- Access token süresi: 1 saat

### Güvenlik Önlemleri
- Tüm API istekleri için JWT token zorunludur
- Rate limiting: 100 istek/dakika
- Başarısız login denemelerinde progressive delay uygulanır
- Hassas veriler için additional encryption kullanılır

## Sürükle-Bırak Fonksiyonalitesi

### Kategori Sıralaması
- Her kategorinin `order` alanı vardır
- Sıralama değişikliği real-time olarak kaydedilir
- Optimistic UI update kullanılır
- Batch update için debounce: 500ms

### Ürün Sıralaması
- Ürünler kategori içinde sıralanır
- Her ürünün `categoryOrder` alanı vardır
- Kategoriler arası taşıma desteklenir
- Sıralama değişikliği real-time kaydedilir

## Genel Kurallar

### Kod Formatı
- ESLint ve Prettier kullanımı zorunludur
- TypeScript strict mode aktif
- Commit mesajları conventional commits formatında

### Performans
- Resimler lazy loading ile yüklenir
- Liste görünümlerinde virtualization kullanılır
- API istekleri için caching implementasyonu
- Büyük listeler için pagination zorunlu

### Hata Yönetimi
- Tüm API hataları merkezi error handler üzerinden yönetilir
- Kullanıcı dostu hata mesajları gösterilir
- Network hataları için retry mekanizması
- Offline support için error boundary kullanımı

# Tema Ayarları Katı Kuralları

## Genel Yapı
- Her tema ayarı bileşeni ayrı bir dosyada tutulmalı
- Bileşenler `frontend/src/components/theme/` altında olmalı
- Her bileşen kendi state'ini yönetmeli ve değişiklikleri üst bileşene iletmeli

## Tema Ayarları Bileşenleri
1. ColorSchemeSettings
   - Ana renkler
   - Sayfa renkleri
   - Header/Footer renkleri
   - Buton renkleri

2. TypographySettings
   - Font aileleri seçimi (önceden tanımlı fontlar)
   - Font boyutları
   - Başlık boyutları (h1-h6)
   - Buton ve menü yazı boyutları

3. LayoutSettings
   - Sayfa maksimum genişliği
   - Container padding
   - Bölüm aralıkları
   - Grid aralıkları
   - Kenar boşlukları

## Veri Yapısı
- Tema ayarları Supabase'de `theme_settings` tablosunda saklanmalı
- Her firma için birden fazla tema oluşturulabilmeli
- Temalar arasında sadece biri aktif olabilmeli

## Supabase Policy Yapısı
```sql
-- Tema ayarları için basit policy
CREATE POLICY "theme_settings_update"
ON public.theme_settings
FOR UPDATE
USING (true)
WITH CHECK (true);

-- RLS'i aktif et
ALTER TABLE public.theme_settings ENABLE ROW LEVEL SECURITY;
```

## Backend Controller Yapısı
- Tema güncellemesi için basit ve etkili yaklaşım:
```typescript
// Sadece gerekli alanları güncelle
const updateData = {
    name: themeData.name,
    colors: themeData.colors,
    typography: themeData.typography,
    layout: themeData.layout,
    updated_at: new Date().toISOString()
};

// Güncelleme işlemi
const { data, error } = await supabase
    .from('theme_settings')
    .update(updateData)
    .match({ id: id })
    .select()
    .single();
```

## Kullanıcı Arayüzü Standartları
- Material-UI bileşenleri kullanılmalı
- Renk seçimleri için native color picker kullanılmalı
- Font seçimleri için dropdown menü kullanılmalı
- Ölçü birimleri için text input kullanılmalı (px, rem, em, % destekli)

## Tema Değişikliklerinin Uygulanması
- Değişiklikler anlık olarak önizlenebilmeli
- Kaydet butonu ile kalıcı hale getirilmeli
- Hata durumlarında kullanıcıya bilgi verilmeli

## Güvenlik
- Tema ayarlarına erişim sadece yetkili kullanıcılar için olmalı
- Her firma sadece kendi temalarını görebilmeli ve düzenleyebilmeli

## Performans
- Gereksiz render'ları önlemek için memoization kullanılmalı
- Büyük veri değişikliklerinde debounce uygulanmalı
- API çağrıları optimize edilmeli

## Hata Yönetimi
- Backend'de detaylı loglama yapılmalı
- Frontend'de kullanıcı dostu hata mesajları gösterilmeli
- Güncelleme işlemlerinde veri kontrolü yapılmalı
- Başarısız işlemlerde otomatik geri alma mekanizması kullanılmalı

## Veri Güncelleme Prensipleri
1. Sadece değişen alanları gönder
2. Gereksiz veri manipülasyonundan kaçın
3. İşlem öncesi basit validasyonlar yap
4. Her işlem sonrası veri tutarlılığını kontrol et
5. Detaylı loglama ile hata tespitini kolaylaştır
